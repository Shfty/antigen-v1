TODO: Refactor component/system/entity component debuggers to use local event queues as per entity debugger
      Need to do some general cleanup afterward
            List index entities in debug scene should use the list itself (index should probably be stored in the list component)
            Replace inspector entities with appropriate event queue entities, track IDs inside systems

TODO: Ensure one-to-many events (of multiple O -> I conversions) work properly
      Events are currently consumed by the first LocalEventSystem
      Need a way to clear local event queues
            Split clearing functionality into a system that runs at the start of the frame for both global and local?
            Would introduce more order-of-execution constraints, not sure if a problem

TODO: Vertical scrolling for HSV shader

TODO: Vertically-split 2x multisampling for each curses cell

TODO: Cleanup pass for distinction between CursesInput / CursesEvent

TODO: Split IntRangeComponent into i64 and Range<i64>
      Would this be better codified as ListRange and ListIndex?
      Could do away with range altogether and draw directly from list size

TODO: Refactor software renderer / string renderer into a single system
      Input data fetching + rendering code is the only major difference
      Need to figure out a good abstraction
      Could move common logic into an impl, have the renderers call it manually

TODO: Re-add list item assemblage support to allow for debug excluding list items, but not their parent lists

TODO: Component data inspector

TODO: Filtering for debug components
      Entities
        If a component is selected, filter out entities that don't have it
        If component data is selected, filter out other entities
        If a system is selected, filter out entities that don't have components that it processes (pending system dependency setup)
      Scene tree
        Use the same rules as entities
      Components
        If an entity is selected, filter out components that don't have a data entry for it
        If component data is selected, filter out other components
        If a system is selected, filter out components that it doesn't process (pending system dependency setup)
      Component data
        If an entity is selected, filter out data from other entities
        If a component is selected, filter out data from other components
        If a system is selected, filter out data from components that system doesn't process (pending system dependency setup)

TODO: Scrolling for lists
      Need to react to newly-implemented MouseScroll input events

TODO: Profiler window
      Will need a custom shader input struct to draw graphs
            Can this be done via generics?
            Or is it better to use generic ShaderInputComponent<T> storage looked up by the shader?
                  Wouldn't work directly for GPU, but could be wrapped by the appropriate renderer
            Could setup shader-specific systems and dataflow for more complex functionality
                  Easy to keep general, can define your own pipeline

TODO: Clipping rects for UI controls
TODO: Refactor list system to only update when hover, selection, list item count or contents have changed

TODO: Register entity fetches and associated logic at System registration time to allow for runtime lookup optimization
    Possible API:
        db
        .entity_query()
        .component::<PositionComponent>()
        .and(
                db
            .entity_query()
            .component::<SizeComponent>()
            .or(
                db
                .entity_query()
                .component::<AnchorsComponent>()
            )
        )
        .then(|entity_id| {
                do_something_with_position_component();
                maybe_do_something_with_size_component()
                maybe_do_something_with_anchors_component()
        })
        .register()
