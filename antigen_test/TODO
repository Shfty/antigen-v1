TODO: Re-add list item assemblage support to allow for debug excluding items, but not their parent lists


TODO: Refactor pancurses renderer to use a framebuffer-like approach
      Use a Vector2I > (Option<Background Color>, Option<Foreground Color>, Option<Char>) map to store only cells that are populated
      For a given Z layer, draw rects first, then strings
      Use background color for rects, foreground color for strings
      Overwrite background color when inserting a rect, but not when inserting a string
      Write framebuffer directly to curses

TODO: Refactor pancurses renderer such that color / color pair registration is internal
      Map RGB colors to the pre-registered color set using PancursesPalette
      Make use of dithered ASCII characters to emulate unregistered colors

TODO: Component data inspector

TODO: Filtering for debug components
      Entities
        If a component is selected, filter out entities that don't have it
        If component data is selected, filter out other entities
        If a system is selected, filter out entities that don't have components that it processes (pending system dependency setup)
      Scene tree
        Use the same rules as entities
      Components
        If an entity is selected, filter out components that don't have a data entry for it
        If component data is selected, filter out other components
        If a system is selected, filter out components that it doesn't process (pending system dependency setup)
      Component data
        If an entity is selected, filter out data from other entities
        If a component is selected, filter out data from other components
        If a system is selected, filter out data from components that system doesn't process (pending system dependency setup)

TODO: Scrolling for lists

TODO: Event synthesis for list hover / click
      Rather than supplying generic hover / click events, list control components should take them as a generic parameter
      This way, arbitrary events can be pushed into the queue for handling by other systems - comparable to Godot's signal/slot setup
      Each list should be able to push multiple events in response to hover / click

TODO: Profiler window
      Will need a way to represent a line graph in pancurses
      Setup bitmap / shader abstractions for rendering RGB cells based on a buffer or closure

TODO: Clipping rects for UI controls
TODO: Refactor list system to only update when hover, selection, list item count or contents have changed

TODO: Respect global position for string control clipping (a.k.a. fix the debug scene test string when the player moves offscreen to the left)

TODO: Register entity fetches and associated logic at System registration time to allow for runtime lookup optimization
    Ex:
        db
        .entity_query()
        .component::<PositionComponent>()
        .and(
                db
            .entity_query()
            .component::<SizeComponent>()
            .or(
                db
                .entity_query()
                .component::<AnchorsComponent>()
            )
        )
        .then(|entity_id| {
                do_something_with_position_component();
                maybe_do_something_with_size_component()
                maybe_do_something_with_anchors_component()
        })
        .register()
