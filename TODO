TODO: Refactor sweep for systems
      Need to make sure querying is being done optimally under new setup
      Minimize cloning in favor of iterators
      Fix concessions made due to inherited mutability
      Use Assembler for cases where entity creation needs to be deferred due to inherited mutability
      Create type aliases for query signatures
            Reduces signature repetition
            Better expressivity for query blocks
            Ex:
                  type IntegratePlayerPosition<'a> = (HasField<char>, Ref<'a, Velocity>, RefMut<'a, Position>);
                  StoreQuery::<IntegratePlayerPosition>::iter(db.as_mut()).for_each(|(_, velocity, position)| **position += **velocity);

TODO: Figure out a solution for avoiding inherited mutability when using assemblages
      Currently necessary due to the automatic storage population strategy
      Nesting RefCells is undesirable due to extra borrow complexity
      Add unchecked variants of insert and assemble functions?
            Moves responsibility to the calling code
            Solves the problem, but the ideal would be fully transparent automation

TODO: Refactor sweep for impl Trait
      Arguments, return types
      Can return a Fn type
            ex. currying an internal closure
            ex. Defining a trait method that returns Fn
                  Applicable to Assemblage constructor storage?
      Can return iterators with impl Iterator<Item=Foo>
            Better than returning concrete collections where possible

TODO: Can anchors/margins be refactored into separate systems?
      More specifically, can margins be generalized?
            Would need somewhere to store final position / size data
            GlobalPosition already does this, but is in and of itself more general
            Preferable to keep things unified if possible - too much overlap between GlobalPosition and MarginPosition
            Could handle in renderer?

TODO: Fix list hover/selection overlay positioning
      Doesn't account for height of previous entries
      Causes incorrect selection indices

TODO: Account for list scroll when positioning hover/selection overlays
TODO: Max limit for list scroll offset
TODO: Scrollbar for lists
TODO: Lists should scroll line-by-line, not item-by-item

TODO: Vertical scrolling for HSV shader

TODO: Vertically-split 2x multisampling for each curses cell
      Will need to make UV a first-class parameter derived from position/size in the software renderer
      Parametrize at SoftwareRenderer construction as Option<Vec<(f32, f32)>> for a custom kernel, default to single-sample if None
      Invoke multiple times with offsets from kernel, average result
      Refer to this as AA, not MSAA - while accurate in the literal sense of multi-sampled AA, the GPU version only applies to edges

TODO: Palettes as components - have renderer take an entity reference for runtime switching

TODO: Type-level color/framebuffer/renderer support for HSV, palette index

TODO: Text shaders for char buffer
      Can CPUShader be generalized for this?

TODO: Shader chaining - take an Option<fn(ShaderInput)> to allow for combination (ex. a wire rect that has a color effect)

TODO: Custom mode for pancurses text color registration - pass fn(Color) -> Color as part of enum

TODO: Cleanup pass for distinction between CursesInput / CursesEvent

TODO: Split IntRangeComponent into i64 and Range<i64>
      Would this be better codified as ListRange and ListIndex?
      Could do away with range altogether and draw directly from list size

TODO: Refactor software renderer / string renderer into a single generic system
      Input data fetching + rendering code is the only major difference
      Need to figure out a good abstraction
      Could move common logic into an impl, have the renderers call it manually

TODO: Pass an assemblage through during ListData instantiation to be used for list items
      Can this be done with generics instead of a dyn trait object?
            Would introduce a dependency in ListSystem

TODO: Filtering for debug components
      (Would this be better expressed as a sort + color highlight?)
      Entities
        If a component is selected, filter out entities that don't have it
        If component data is selected, filter out other entities
        If a system is selected, filter out entities that don't have components that it processes (pending system dependency setup)
      Scene tree
        Use the same rules as entities
      Components
        If an entity is selected, filter out components that don't have a data entry for it
        If component data is selected, filter out other components
        If a system is selected, filter out components that it doesn't process (pending system dependency setup)
      Component data
        If an entity is selected, filter out data from other entities
        If a component is selected, filter out data from other components
        If a system is selected, filter out data from components that system doesn't process (pending system dependency setup)

TODO: Profiler window
      Will need a custom shader input struct to draw graphs
            Can this be done via generics?
            Or is it better to use generic ShaderInputComponent<T> storage looked up by the shader?
                  Wouldn't work directly for GPU, but could be wrapped by the appropriate renderer
            Could setup shader-specific systems and dataflow for more complex functionality
                  Easy to keep general, can define your own pipeline

TODO: Component data inspector
      How would this work?
      Seems like it would be necessary to introduce some sort of property interface for get/set of specific fields
      Doesn't seem like it could be easily automated without macros

TODO: Clipping rects for UI controls
TODO: Refactor list system to only update when hover, selection, list item count or contents have changed

TODO: Register entity fetches and associated logic at System registration time
      Allows for runtime lookup optimization

TODO: Custom component storage registration
    SparseVecMap - Very common components (ex. position)
    DenseVecMap - Somewhat common components (ex. mesh, physics body)
    HashMap - Rare components (ex. framebuffer, texture, audio)

    How to encode rarity? Custom entity fetches could be used as a heuristic
    
    How should these categories interact with Store's default type sizing predicate?
        Rarity should probably take precedence, since memory wastage scales linearly with entity count for SparseVecMap