TODO: Fix black color cells being skipped (need to make sure text cells w/black background are overwritten - use Z buffer)

TODO: Refactor software framebuffer rendering out of PancursesRenderSystem and into a SoftwareRendererSystem w/ SoftwareFramebufferComponent storage
      Can text framebuffer + rendering be factored out into a generic system? Or should they still live inside PancursesRendererSystem?

TODO: Use palette-based color lookup to prevent curses color overflow
      Probably best to approach as fixed palette / dynamic pairs to start off (prevents breaking text rendering)
      Register all ~256 colors on first frame
            Need to account for greys - true black/white are default, pack intermediaries into remaining color indices
      Batch up color pairs during color/character combination, merge similar-enough pairs until list size is within limit
      Register pairs with pancurses
      Render scene

TODO: Dynamic palette that reallocates its color coverage based on the total amount of R/G/B in the framebuffer
      Need to respect the 256 color / 256 color pair limit
            Color pairs are a tricky limitation, and pancurses-specific - preferable to make this general

TODO: Fix highlight rects being 1px high for lists containing newline characters
TODO: Re-add list item assemblage support to allow for debug excluding list items, but not their parent lists

TODO: Component data inspector

TODO: Filtering for debug components
      Entities
        If a component is selected, filter out entities that don't have it
        If component data is selected, filter out other entities
        If a system is selected, filter out entities that don't have components that it processes (pending system dependency setup)
      Scene tree
        Use the same rules as entities
      Components
        If an entity is selected, filter out components that don't have a data entry for it
        If component data is selected, filter out other components
        If a system is selected, filter out components that it doesn't process (pending system dependency setup)
      Component data
        If an entity is selected, filter out data from other entities
        If a component is selected, filter out data from other components
        If a system is selected, filter out data from components that system doesn't process (pending system dependency setup)

TODO: Scrolling for lists

TODO: Event synthesis for list hover / click
      Rather than supplying generic hover / click events, list control components should take them as a generic parameter
      This way, arbitrary events can be pushed into the queue for handling by other systems - comparable to Godot's signal/slot setup
      Each list should be able to push multiple events in response to hover / click

TODO: Profiler window
      Will need a custom shader input struct to draw graphs
            Can this be done via generics?
            Or is it better to use generic ShaderInputComponent<T> storage looked up by the shader?
                  Wouldn't work directly for GPU, but could be wrapped by the appropriate renderer
            Could setup shader-specific systems and dataflow for more complex functionality
                  Easy to keep general, can define your own pipeline

TODO: Clipping rects for UI controls
TODO: Refactor list system to only update when hover, selection, list item count or contents have changed

TODO: Register entity fetches and associated logic at System registration time to allow for runtime lookup optimization
    Possible API:
        db
        .entity_query()
        .component::<PositionComponent>()
        .and(
                db
            .entity_query()
            .component::<SizeComponent>()
            .or(
                db
                .entity_query()
                .component::<AnchorsComponent>()
            )
        )
        .then(|entity_id| {
                do_something_with_position_component();
                maybe_do_something_with_size_component()
                maybe_do_something_with_anchors_component()
        })
        .register()
